/* 















































_______________________________________________________________________________ Grid Garden
grid-column-start: 3; - определяет начальную позицию элемента внутри grid-столбцов
покроет водой зону, начинающуюся на третьей grid-линии по вертикали, это как сказать “третья вертикальная граница на grid-сетке слева”.

Когда вы используете только grid-column-start, grid-элемент по умолчанию “захватит” только один столбец. Однако вы можете увеличить элемент между несколькими столбцами, если добавите свойство grid-column-end

grid-column-end- определяет конечную позицию элемента внутри grid столбцов при это счет идет так же слева направо
12345 grid-column-end: 2; это та же самая 2 что и grid-column-start: 2;

grid-column-end: 4; - задействует первые три колонки (до четвертой)
grid-column-end: 2; - обращается ко 

grid-column-end: -3; - второй элемент из пяти справа
grid-column-end: -2; - первый элемент из пяти справа
grid-column-start: -3; - the same второй элемент из пяти справа

Вместо определения grid-элемента на основе начальной и конечной позиции grid-строк вы можете задавать их с помощью необходимой вам ширины строк, используя span. Помните, что span работает только с положительными значениями.

grid-column-end: span 5; - обратится по всей ширине строки таблицы из 5 столбцов
grid-column-start: span 3; - обратится с конца к первым трем столбцам в строке

Печатать каждый раз grid-column-start и grid-column-end может быть немного утомительно. К счастью, есть краткая форма grid-column, которая принимает оба значения сразу через косую черту: /.

Например, grid-column: 2 / 4 скажет grid-элементу начаться на второй вертикальной grid-линии и закончиться на четвёртой(третьей).

Одна из вещей, которая отличает CSS Grid Layout от Flexbox'а, — это то, что вы можете легко позиционировать элементы в двух направлениях: в столбцах и в строках. grid-row-start работает почти как grid-column-start, но только по вертикальной оси.

grid-row: 3 / 6; аналогично grid-column: 2 / 4 только по вертикали 

_______________ Конечное значение у Grid на 1 меньше

grid-column: 2 / 6; от второго элемента до 5-го
grid-row: 1 / 6; - захватит все строки и стобцы кроме первого столбца

grid-area: 1/2/4/6;

от первой строки до 3 включительно, от 2 - го столбца до 6-го включительно

Если вас также утомляет печатать grid-column и grid-row, есть сокращённое свойство и для этого. grid-area принимает 4 значения, разделенные косой чертой /: 
grid-row-start/ grid-column-start/ grid-row-end/ grid-column-end.

Пример: grid-area: 1 / 2 / 4 / 6; - с первого по третью строку и со второго по пятый столбец
Как насчет множества элементов? Вы можете накладывать их друг на друга без проблем. Используйте grid-area

Если grid-элементы не имеют конкретного расположения с grid-area, grid-column, grid-row и т.д., они автоматически размещаются, следуя порядку, написанному в коде. Мы можем изменить это с помощью свойства order, которое является одним из преимуществ CSS Grid Layout перед табличной разметкой.

Изначально все grid-элементы имеют order, равный 0, но этому свойству можно присвоить любое положительное или отрицательное значение, примерно как у z-index.

___________ по поводу order
.1 {
    order: 0;
}

.2 {
    order: -1; - расположит 2 перед 1
}

До этого момента сад имел grid-сетку с пятью столбцами по 20% ширины и пятью строками, каждая по 20% высоты.

Это было сделано свойствами grid-template-columns: 20% 20% 20% 20% 20%; и grid-template-rows: 20% 20% 20% 20% 20%; Каждое свойство имеет пять значений, которые создают пять столбцов, где ширина каждого равна 20% от общей ширины сада.

grid-template-columns: 50%; - первый столбец по ширине займет 50% экрана

Определять несколько столбцов с одинаковой шириной может быть утомительно. К счастью, есть функция repeat, которая призвана помочь в этом.

Например, раньше мы определяли пять столбцов по 20% ширины с помощью grid-template-columns: 20% 20% 20% 20% 20%; Это можно упростить до grid-template-columns: repeat(5, 20%).


grid-template-columns: repeat(8,12.5%); - 8 столбцов шириной по 12.5% от максимума
grid-template-rows: 20% 20% 20% 20% 20%; - 5 строк шириной по 20% от максимума

_____________________ Дебильный единицы измерения
__em – задаёт размер относительно шрифта родителя, можно относительно конкретных символов: "x" ( ex ) и "0" ( ch ), используется там, где нужно упростить масштабирование компоненты.
__Viewport Height (vh) — это процентная величина от общей высоты области просмотра. 10vh составляет 10% от текущей высоты области просмотра

__ fr 
У нас есть контейнер <section> который хранит в себе 5 <div>

Чтобы разделить 100% ширину равномерно и раздать каждому <div> равную ширину, вам нужно указать для каждого индивидуальную ширину в 20%. Почему?

Потому что у нас пять <div>. 100% разделить на 5 получается 20%.

Но когда вы уже было подумали, что сделали свою работу, приходит ещё один сосед и настаивает на том, чтобы ему тоже дали равную порцию пирога.

Если добавится еще один <div>, то вам придется пересчитывать всё и указывать заново ширину! 100% разделить на 6, ну дальше сами считайте.

И именно это та проблема, которую решает fr — единица гибкости.

Единица гибкости
С единицей гибкости (fr) вам не нужно что-то больше пересчитывать — вообще не нужно. На то она и единица гибкости, чтобы быть гибкой.

Если вы указываете ширину в 1fr, то вы можете дальше добавлять столько элементов, сколько возможно и это она об этом позаботиться. Ширина каждого элемента будет равномерно разделена среди дочерних элементов.

Вы не привязаны к целым значениям. Вы можете спокойно указывать такие значения как: 1.5fr 3fr 4.5fr В общем суть тут ясна.

Но давайте углубимся в математику. И разберем все более детально, как что происходит за кулисами расчета каждой единицы гибкости.

В нашем случае, общая доля равна 1.5fr + 3fr + 4.5fr = 9fr

Если родительский контейнер имеет ширину 900px

Первое значение, 1.5fr будет иметь ширину из расчета 1.5fr/9fr * 900px. Что выдает в итоге 150px.

Второе значение, 3fr будет иметь ширину 3fr/9fr * 900px. Что выдаст нам в итоге 300px.

Третье значение, 4.5fr будет иметь ширину 4.5fr/9fr * 900px. Что выдаст в итоге 450px.
____________________________________

CSS Grid Layout также вводит новую единицу измерения: дробный fr (англ. fraction). Каждый fr выделяет одну часть свободного пространства. Например, если двум элементам задано 1fr и 3fr соответственно, то пространство будет поделено на 4 одинаковые части. Первый элемент займет ¼, а второй оставшиеся ¾ пространства.
Сейчас сорняки занимают левую ⅙ часть вашей первой строки, а морковь оставшиеся ⅚. Создайте два столбца с такой же шириной, используя fr.
grid-template-columns: 1fr 5fr;

grid-template-columns: 50px 1fr 1fr 1fr 50px; - 5 столбцов крайние ширина по 50px остальные имеют одинаковую ширину по оставшейся части в середине

grid-template — сокращённый вариант комбинации grid-template-rows и grid-template-columns.

Например, grid-template: 50% 50% / 200px создаст grid-сетку с двумя строками по 50% каждая и одним столбцом шириной 200 пикселей.
